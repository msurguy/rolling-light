/*

Highly complex, unmaintainable code ahead

*/

#include <Arduino.h>
#include <Adafruit_NeoPixel.h>
#include <Ticker.h>

Ticker flipper;

//  VARIABLES
#define LEDCOUNT 9

int inputPin = D3; // pushbutton connected to digital pin D3
// int input2Pin = D10;               // pushbutton connected to digital pin D3
int buttonVal = 1; // variable to store the read value

int fadeRate = 0;  // used to fade LED on with PWM on fadePin


unsigned long now            = 0;
unsigned long previousMillis = 0; // will store last time the LED

enum pattern { NONE, RAINBOW_CYCLE, FADE, PULSE };
enum direction { FORWARD, REVERSE };

// NeoPattern Class - derived from the Adafruit_NeoPixel class
class NeoPatterns : public Adafruit_NeoPixel {
public:

  // Member Variables:
  pattern ActivePattern;    // which pattern is running
  direction Direction;      // direction to run the pattern

  unsigned long Interval;   // milliseconds between updates
  unsigned long lastUpdate; // last update of position

  uint32_t Color1, Color2;  // What colors are in use
  uint16_t TotalSteps;      // total number of steps in the pattern
  uint16_t Index;           // current step within the pattern

  void (*OnComplete)();     // Callback on completion of pattern

  // Constructor - calls base-class constructor to initialize strip
  NeoPatterns(uint16_t pixels, uint8_t pin, uint8_t type, void(*callback)())
    : Adafruit_NeoPixel(pixels, pin, type)
  {
    OnComplete = callback;
  }

  // Set all pixels to a color (synchronously)
  void ColorSet(uint32_t color)
  {
    for (int i = 0; i < numPixels(); i++)
    {
      setPixelColor(i, color);
    }
    show();
  }

  // Returns the Red component of a 32-bit color
  uint8_t Red(uint32_t color)
  {
    return (color >> 16) & 0xFF;
  }

  // Returns the Green component of a 32-bit color
  uint8_t Green(uint32_t color)
  {
    return (color >> 8) & 0xFF;
  }

  // Returns the Blue component of a 32-bit color
  uint8_t Blue(uint32_t color)
  {
    return color & 0xFF;
  }

  // Input a value 0 to 255 to get a color value.
  // The colours are a transition r - g - b - back to r.
  uint32_t Wheel(byte WheelPos)
  {
    WheelPos = 255 - WheelPos;

    if (WheelPos < 85)
    {
      return Color(255 - WheelPos * 3, 0, WheelPos * 3);
    }
    else if (WheelPos < 170)
    {
      WheelPos -= 85;
      return Color(0, WheelPos * 3, 255 - WheelPos * 3);
    }
    else
    {
      WheelPos -= 170;
      return Color(WheelPos * 3, 255 - WheelPos * 3, 0);
    }
  }

  // Increment the Index and reset at the end
  void Increment()
  {
    if (Direction == FORWARD)
    {
      Index++;

      if (Index >= TotalSteps)
      {
        Index = 0;

        if (OnComplete != NULL)
        {
          OnComplete(); // call the comlpetion callback
        }
      }
    }
    else // Direction == REVERSE
    {
      --Index;

      if (Index <= 0)
      {
        Index = TotalSteps - 1;

        if (OnComplete != NULL)
        {
          OnComplete(); // call the comlpetion callback
        }
      }
    }
  }

  // Reverse pattern direction
  void Reverse()
  {
    if (Direction == FORWARD)
    {
      Direction = REVERSE;
      Index     = TotalSteps - 1;
    }
    else
    {
      Direction = FORWARD;
      Index     = 0;
    }
  }

  // Initialize for a RainbowCycle
  void RainbowCycle(uint8_t interval, direction dir = FORWARD)
  {
    ActivePattern = RAINBOW_CYCLE;
    Interval      = interval;
    TotalSteps    = 255;
    Index         = 0;
    Direction     = dir;
  }

  // Update the Rainbow Cycle Pattern
  void RainbowCycleUpdate()
  {
    for (int i = 0; i < numPixels(); i++)
    {
      setPixelColor(i, Wheel(((i * 256 / numPixels()) + Index) & 255));
    }
    show();
    Increment();
  }

  // Initialize for a Fade
  void Fade(uint32_t  color1,
            uint32_t  color2,
            uint16_t  steps,
            uint8_t   interval,
            direction dir = FORWARD)
  {
    ActivePattern = FADE;
    Interval      = interval;
    TotalSteps    = steps;
    Color1        = color1;
    Color2        = color2;
    Index         = 0;
    Direction     = dir;
  }

  // Update the Fade Pattern
  void FadeUpdate()
  {
    // Calculate linear interpolation between Color1 and Color2
    // Optimise order of operations to minimize truncation error
    uint8_t red   = ((Red(Color1) * (TotalSteps - Index)) + (Red(Color2) * Index)) / TotalSteps;
    uint8_t green = ((Green(Color1) * (TotalSteps - Index)) + (Green(Color2) * Index)) / TotalSteps;
    uint8_t blue  = ((Blue(Color1) * (TotalSteps - Index)) + (Blue(Color2) * Index)) / TotalSteps;

    ColorSet(Color(red, green, blue));

    // show();
    Increment();
  }

  // Initialize for a Pulse
  void Pulse(uint32_t  color1,
             uint32_t  color2,
             uint16_t  steps,
             uint8_t   interval,
             direction dir = FORWARD)
  {
    ActivePattern = FADE;
    Interval      = interval;
    TotalSteps    = steps;
    Color1        = color1;
    Color2        = color2;
    Index         = 0;
    Direction     = dir;
  }

  // Update the Fade Pattern
  void PulseUpdate()
  {
    // Calculate linear interpolation between Color1 and Color2
    // Optimise order of operations to minimize truncation error
    uint8_t red   = ((Red(Color1) * (TotalSteps - Index)) + (Red(Color2) * Index)) / TotalSteps;
    uint8_t green = ((Green(Color1) * (TotalSteps - Index)) + (Green(Color2) * Index)) / TotalSteps;
    uint8_t blue  = ((Blue(Color1) * (TotalSteps - Index)) + (Blue(Color2) * Index)) / TotalSteps;

    ColorSet(Color(red, green, blue));

    // show();
    Increment();
  }

  // Update the pattern
  void Update()
  {
    if ((millis() - lastUpdate) > Interval) // time to update
    {
      lastUpdate = millis();

      switch (ActivePattern)
      {
      case RAINBOW_CYCLE:
        RainbowCycleUpdate();
        break;

      case FADE:
        FadeUpdate();
        break;

      case PULSE:
        PulseUpdate();
        break;

      default:
        break;
      }
    }
  }
};

const int numReadings = 20;
int readings[numReadings]; // the readings from the analog input
int readIndex = 0;         // the index of the current reading
int total     = 0;         // the running total
int average   = 30;

// these variables are volatile because they are used during the interrupt
// service routine!
volatile int BPM;                  // used to hold the pulse rate
volatile int Signal;               // holds the incoming raw data
volatile int IBI = 600;            // holds the time between beats, must be
                                   // seeded!
volatile boolean Pulse = false;    // true when pulse wave is high, false when
                                   // it's low
volatile boolean QS = false;       // becomes true when Arduoino finds a beat.

int rate[10];                      // array to hold last ten IBI values
unsigned long sampleCounter = 0;   // used to determine pulse timing
unsigned long lastBeatTime  = 0;   // used to find IBI
int P                       = 512; // used to find peak in pulse wave, seeded
int T                       = 512; // used to find trough in pulse wave,
                                   // seeded
int thresh = 512;                  // used to find instant moment of heart
                                   // beat, seeded
int amp = 100;                     // used to hold amplitude of pulse
                                   // waveform, seeded
boolean firstBeat = true;          // used to seed rate array so we startup
                                   // with reasonable BPM
boolean secondBeat = false;        // used to seed rate array so we startup
                                   // with reasonable BPM

// Stick Completion Callback
void StickComplete();

// Adafruit_NeoPixel strip = Adafruit_NeoPixel(LEDCOUNT, D2, NEO_GRB + NEO_KHZ800);
NeoPatterns SphereLights(LEDCOUNT, D2, NEO_GRB + NEO_KHZ800, &StickComplete);

int i;

// THIS IS THE TICKER INTERRUPT SERVICE ROUTINE.
// Ticker makes sure that we take a reading every 2 miliseconds
void ISRTr() {                                    // triggered when flipper
                                                  // fires....
  cli();                                          // disable interrupts while we
                                                  // do this
  Signal         = analogRead(A0);                // read the Pulse Sensor
  sampleCounter += 2;                             // keep track of the time in
                                                  // mS with this variable
  int N = sampleCounter - lastBeatTime;           // monitor the time since the
                                                  // last beat to avoid noise

  //  find the peak and trough of the pulse wave
  if ((Signal < thresh) && (N > (IBI / 5) * 3)) { // avoid dichrotic noise by
                                                  // waiting 3/5 of last IBI
    if (Signal < T) {                             // T is the trough
      T = Signal;                                 // keep track of lowest point
                                                  // in pulse wave
    }
  }

  if ((Signal > thresh) && (Signal > P)) { // thresh condition helps avoid noise
    P = Signal;                            // P is the peak
  }                                        // keep track of highest point in
                                           // pulse wave

  //  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
  // signal surges up in value every time there is a pulse
  if (N > 250) {                          // avoid high frequency noise
    if ((Signal > thresh) && (Pulse == false) && (N > (IBI / 5) * 3)) {
      Pulse = true;                       // set the Pulse flag when we
                                          // think there is a pulse
      // digitalWrite(blinkPin, HIGH);       // turn on pin 13 LED
      IBI = sampleCounter - lastBeatTime; // measure time between beats
                                          // in mS
      lastBeatTime = sampleCounter;       // keep track of time for
                                          // next pulse

      if (secondBeat) {                   // if this is the second
                                          // beat, if secondBeat ==
                                          // TRUE
        secondBeat = false;               // clear secondBeat flag

        for (int i = 0; i <= 9; i++) {    // seed the running total to
                                          // get a realisitic BPM at
                                          // startup
          rate[i] = IBI;
        }
      }

      if (firstBeat) {      // if it's the first time we found a beat, if
                            // firstBeat == TRUE
        firstBeat  = false; // clear firstBeat flag
        secondBeat = true;  // set the second beat flag
        sei();              // enable interrupts again
        return;             // IBI value is unreliable so discard it
      }


      // keep a running total of the last 10 IBI values
      word runningTotal = 0;                // clear the runningTotal variable

      for (int i = 0; i <= 8; i++) {        // shift data in the rate array
        rate[i]       = rate[i + 1];        // and drop the oldest IBI value
        runningTotal += rate[i];            // add up the 9 oldest IBI values
      }

      rate[9] = IBI;                        // add the latest IBI to the rate
                                            // array
      runningTotal += rate[9];              // add the latest IBI to
                                            // runningTotal
      runningTotal /= 10;                   // average the last 10 IBI values
      BPM           = 60000 / runningTotal; // how many beats can fit into a
                                            // minute? that's BPM!
      QS = true;                            // set Quantified Self flag
      // QS FLAG IS NOT CLEARED INSIDE THIS ISR
    }
  }

  if ((Signal < thresh) && (Pulse == true)) { // when the values are going down,
                                              // the beat is over
    // digitalWrite(blinkPin, LOW);              // turn off pin 13 LED
    Pulse = false;                            // reset the Pulse flag so we can
                                              // do it again
    amp    = P - T;                           // get amplitude of the pulse wave
    thresh = amp / 2 + T;                     // set thresh at 50% of the
                                              // amplitude
    P = thresh;                               // reset these for next time
    T = thresh;
  }

  if (N > 2500) {                 // if 2.5 seconds go by without a beat
    thresh       = 512;           // set thresh default
    P            = 512;           // set P default
    T            = 512;           // set T default
    lastBeatTime = sampleCounter; // bring the lastBeatTime up to date
    firstBeat    = true;          // set these to avoid noise
    secondBeat   = false;         // when we get the heartbeat back
  }

  sei();                          // enable interrupts when youre done!
}// end isr

void interruptSetup() {
  // Initializes Ticker to have flipper run the ISR to sample every 2mS as per
  // original Sketch.
  flipper.attach_ms(2, ISRTr);
}

void setup() {
  Serial.begin(115200);
  pinMode(inputPin, INPUT); // set pin as input

  for (int thisReading = 0; thisReading < numReadings; thisReading++) {
    readings[thisReading] = 0;
  }

  SphereLights.begin();

  interruptSetup(); // sets up to read Pulse Sensor signal every 2mS
}

void loop() {
  now = millis();

  buttonVal = digitalRead(inputPin); // read the input pin

  // Sensor data
  if (QS == true) {                  // Quantified Self flag is true when
    // arduino finds a heartbeat
    fadeRate = 1024;

    // subtract the last reading:
    total = total - readings[readIndex];

    // read from the sensor:
    readings[readIndex] = BPM;

    // add the reading to the total:
    total = total + readings[readIndex];

    // advance to the next position in the array:
    readIndex = readIndex + 1;

    // if we're at the end of the array...
    if (readIndex >= numReadings) {
      // ...wrap around to the beginning:
      readIndex = 0;
    }

    // calculate the average:
    average = total / numReadings;


    Serial.println(average);

    if ((average > 50) && (average < 150)) {
      SphereLights.Index = 0;
    }

    // if ((now - previousMillis) > 1000) // time to update
    // {
    //  previousMillis     = now;
    // SphereLights.Index = 0;

    // }

    QS = false; // reset the Quantified Self flag for next time
  }

  if (buttonVal == 1) {
    if ((average > 50) && (average < 150)) {
      SphereLights.Color1        = SphereLights.Color(255, 0, 0);
      SphereLights.Color2        = SphereLights.Color(180, 0, 0);
      SphereLights.ActivePattern = PULSE;
      SphereLights.Interval      = 3;
      SphereLights.TotalSteps    = 255;

      SphereLights.Update();
    } else {
      SphereLights.Color1        = SphereLights.Color(0, 0, 120);
      SphereLights.Color2        = SphereLights.Color(0, 0, 255);
      SphereLights.ActivePattern = FADE;
      SphereLights.Interval      = 2;
      SphereLights.TotalSteps    = 512;
      SphereLights.Update();
    }
  }

  if (buttonVal == 0) {
    SphereLights.ActivePattern = RAINBOW_CYCLE;
    SphereLights.Interval      = 3;
    SphereLights.Update();
  }
}

// LED animation Completion Callback
void StickComplete()
{
  SphereLights.Reverse();
}
